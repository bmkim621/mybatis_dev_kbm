<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.yi.mybatis_dev_kbm.dao.StudentMapper">
	<sql id="selectSql">
		select stud_id as studId, name, email, dob, phone from students
	</sql>

	<sql id="whereSql">
		<where>
			<if test="studId != null">
				stud_id = #{studId};	<!-- studId의 getter 메서드 호출 -->
			</if>
		</where>
	</sql>
	
	<select id="selectStudentByNo" parameterType="Student" resultType="Student">
		<include refid="selectSql"></include>
		<include refid="whereSql"></include>
		
<!-- 	select stud_id as studId, name, email, dob, phone
		from students
		where stud_id = #{studId}; -->
	</select>

	<select id="selectStudentByAll" resultType="Student">
		<include refid="selectSql"></include>
<!-- 	select stud_id as studId, name, email, dob, phone
		from students; -->
	</select>
	
	<insert id="insertStudent" parameterType="Student">
		insert into students(stud_id, name, email, phone, dob)
		values(#{studId}, #{name}, #{email}, #{phone}, #{dob});
	</insert>
	
	<update id="updateStudent" parameterType="Student">
		update students
		set name = #{name}, email = #{email}, phone = #{phone}, dob = #{dob}
		where stud_id = #{studId};
	</update>
	
	<delete id="deleteStudent">
		delete from students
		where stud_id = #{studId};
	</delete>
	
	
	<!-- resultMap -->
	<resultMap id="StudentResult" type="Student">
		<id property="studId" column="stud_id" />
		<result property="name" column="name"/>
		<result property="email" column="email"/>
		<result property="phone" column="phone"/>
		<result property="dob" column="dob"/>
	</resultMap>
	
	<resultMap id="StudentWithAddressResult" type="Student" extends="StudentResult">
		<result property="address.addrId" column="addr_id"/>
		<result property="address.street" column="street"/>
		<result property="address.city" column="city"/>
		<result property="address.state" column="state"/>
		<result property="address.zip" column="zip"/>
		<result property="address.country" column="country"/>
	</resultMap>
	
	<resultMap id="StudentWithAddressResult2" type="Student">
		<id property="studId" column="stud_id" />
		<result property="name" column="name"/>
		<result property="email" column="email"/>
		<result property="phone" column="phone"/>
		<result property="dob" column="dob"/>
		<result property="address.addrId" column="addr_id"/>
		<result property="address.street" column="street"/>
		<result property="address.city" column="city"/>
		<result property="address.state" column="state"/>
		<result property="address.zip" column="zip"/>
		<result property="address.country" column="country"/>
	</resultMap>
	
	
	<select id="selectStudentByAllForResultMap" resultMap="StudentResult">
		<include refid="selectSql"/>
		<!-- select stud_id, name, email, dob, phone from students -->
	</select>
	
	<sql id="selectJoinAddressSql">
		select stud_id, name, email, phone, a.addr_id, street, city, state, zip, country
		from students s left outer join addresses a
		on s.ADDR_ID = a.ADDR_ID
	</sql>
	
	
	<!-- extends -->
	<select id="selectStudentByNoForResultMapExtends" parameterType="Student" resultMap="StudentWithAddressResult">
		<include refid="selectJoinAddressSql"/>
		<include refid="whereSql"/>
	</select>
	
	<select id="selectStudentByNoForResultMapExtends2" resultMap="StudentWithAddressResult2">
		select stud_id, name, email, phone, a.addr_id, street, city, state, zip, country
		from students s left outer join addresses a
		on s.ADDR_ID = a.ADDR_ID
		where stud_id = #{studId};
	</select>
	
	<!-- hashMap -->
	<select id="selectStudentByAllforHashMap" resultType="map">
		<include refid="selectSql"/>
	</select>
	
	
	<!-- 내포된 결과매핑(ResultMap)을 사용한 일대일 매핑 -->
	<resultMap id="StudentAssociation" type="Student" extends="StudentResult" >
		<association property="address" resultMap="kr.or.yi.mybatis_dev_kbm.dao.AddressMapper.AddressResult" />
	</resultMap>
	
	<select id="selectStudentByNoAssociation" parameterType="Student" resultMap="StudentAssociation">
		<include refid="selectJoinAddressSql" />
		<include refid="whereSql" />
	</select>
	
	
	<!-- enum 타입 다루기 -->
	<sql id="insertEnumSql">
		INSERT INTO STUDENTS(STUD_ID, NAME, EMAIL, PHONE, DOB, GENDER)
		VALUES (#{studId}, #{name}, #{email}, #{phone}, #{dob}, #{gender})
	</sql>
	
	<insert id="insertEnumStudent" parameterType="Student" useGeneratedKeys="true" keyProperty="studId">
		<include refid="insertEnumSql"></include>
	</insert>
	
	<resultMap type="Student" id="StudentResultGender" extends="StudentResult">
		<result property="gender" column="gender" />
	</resultMap>
	
	<select id="selectStudentWithGender" resultMap="StudentResultGender">
		select stud_id as studid, name, email, dob, phone, gender from students
	</select>
	
	<!-- 여러 개의 입력 파라미터 전달 -->
	<sql id="selectParameterSql">
		select stud_id, name, email, phone, dob, gender from students
	</sql>
	
	<sql id="whereNameEmailSql">
		<where>
			<if test="name != null">
				name = #{name}
			</if>
			<if test="email != null">
				AND email = #{email}
			</if>
		</where>
	</sql>
	
	<select id="selectAllStudentByMap" parameterType="map" resultMap="StudentResultGender">
		<include refid="selectParameterSql" />
		<include refid="whereNameEmailSql" />
	</select>
	
	<!-- ResultSet 처리 방식의 재정의 -->
	<resultMap type="Student" id="studentIdName">
		<id property="studId" column="stud_id" />
		<result property="name" column="name" />
	</resultMap>
									<!-- 위에서 name, id로만 받았으니까 select 문장에도 id, name만 -->
	<select id="selectStudentForMap" resultMap="studentIdName">
		select stud_id, name from students
	</select>
	
										<!-- gender 포함해서 다 받음 -->
	<select id="selectStudentAllForMap" resultMap="StudentResultGender">
		select stud_id, name, email, phone, dob, gender from students
	</select>
</mapper>